package Ch15;

public class C00INFO {

//		디자인패턴 종류
//		싱글톤 패턴 (Singleton Pattern):
//		이 패턴은 애플리케이션에서 특정 클래스의 인스턴스를 하나만 생성하도록 보장하는 패턴입니다. 
//		전역 변수를 사용하지 않고도 객체에 접근할 수 있으며, 인스턴스가 필요한 경우 항상 동일한 인스턴스를 
//		반환합니다.
//
//		팩토리 메서드 패턴 (Factory Method Pattern):
//		이 패턴은 객체의 인스턴스화를 서브 클래스로 분리하여 처리하는 패턴입니다. 슈퍼 클래스에서는 
//		인스턴스를 생성하는 추상 메서드를 정의하고, 서브 클래스에서는 이 추상 메서드를 구현하여 객체를 생성합니다.
//
//		추상 팩토리 패턴 (Abstract Factory Pattern):
//		이 패턴은 관련된 객체들의 집합을 생성하기 위한 인터페이스를 제공하는 패턴입니다. 서로 다른 
//		구체적인 팩토리 클래스를 사용하여 다른 종류의 객체를 생성할 수 있으며, 클라이언트는 팩토리 인터페이스를
//		통해 객체를 생성하고 사용합니다.
//
//		빌더 패턴 (Builder Pattern):
//		이 패턴은 복잡한 객체의 생성 과정을 추상화하여 표현하는 패턴입니다. 객체의 구성 요소를 
//		단계적으로 추가하거나 변경하여 객체를 생성할 수 있으며, 객체의 생성 과정을 사용자에게 노출시키지 않습니다.
//
//		프로토 타입 패턴 (Prototype Pattern):
//		이 패턴은 기존 객체를 복제하여 새로운 객체를 생성하는 패턴입니다. 복잡한 초기화 과정이 
//		필요한 객체를 쉽게 생성할 수 있으며, 객체 간의 참조 문제를 피할 수 있습니다.
//
//		어댑터 패턴 (Adapter Pattern):
//		이 패턴은 호환되지 않는 인터페이스를 가진 클래스들을 함께 동작하도록 만드는 패턴입니다. 
//		어댑터 클래스를 사용하여 서로 다른 인터페이스를 가진 클래스들이 함께 작동할 수 있도록 중개 역할을 
//		수행합니다.
//
//		옵저버 패턴 (Observer Pattern):
//		이 패턴은 한 객체의 상태 변화를 관찰하는 다른 객체들에게 자동으로 알림을 전달하는 패턴입니다. 
//		주체(Subject)와 관찰자(Observer)로 구성되며, 상태 변화가 발생하면 관찰자들에게 알림이 전달됩니다.
//
//		전략 패턴 (Strategy Pattern):
//		이 패턴은 실행 중에 알고리즘을 선택할 수 있도록 하는 패턴입니다. 알고리즘을 캡슐화하여 각각의 
//		전략을 독립적으로 변경할 수 있으며, 클라이언트는 전략을 선택하여 사용합니다.
//	
}
